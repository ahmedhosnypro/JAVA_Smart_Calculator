type: edu
custom_name: stage8
files:
- name: src/calculator/Main.java
  visible: true
  text: |
    package calculator;

    import java.util.Scanner;

    public class Main {

        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            // put your code here
        }
    }
  learner_created: false
- name: test/Test.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest<String> {
        @Override
        public List<TestCase<String>> generate() {
            return Arrays.asList(
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // tests of functionality of previous steps
                        main.start();

                        // test of /help
                        String output = main.execute("/help").trim();
                        if (output.length() < 4) {
                            return CheckResult.wrong("It seems like there was no any \"help\" message.");
                        }

                        // input empty string
                        output = main.execute("");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Incorrect response to an empty string. " +
                                    "The program should not print anything.");
                        }

                        // testing basic assignment
                        output = main.execute("n = 32");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // testing a big amount of numbers
                        output = main.execute("33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4").trim();
                        if (!output.equals("-3")) {
                            return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.");
                        }

                        // the same with a variable
                        output = main.execute("33 + 20 + 11 + 49 - n - 9 + 1 - 80 + 4").trim();
                        if (!output.equals("-3")) {
                            return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.");
                        }


                        output = main.execute("c = n \nc = 2");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // check value
                        output = main.execute("  c  ").trim();
                        if (!output.equals("2")) {
                            return CheckResult.wrong("The variable stores not a correct value." +
                                    "May be the program could not assign the value of one variable to another one.");
                        }

                        // the sum of the numbers is zero
                        output = main.execute("11 - 13 + c").trim();
                        if (!output.equals("0")) {
                            return CheckResult.wrong("The problem when sum is equal to 0 has occurred.");
                        }

                        // test of multiple operations
                        output = main.execute("5 --- 2 ++++++ 4 -- 2 ---- 1").trim();
                        if (!output.equals("10")) {
                            return CheckResult.wrong("The program cannot process multiple operations with several operators.");
                        }

                        // test of a nonexistent command
                        output = main.execute("/start").trim().toLowerCase();
                        if (!output.startsWith("unknown")) {
                            return CheckResult.wrong("The program should print \"Unknown command\" " +
                                    "when a nonexistent command is entered.");
                        }

                        // testing invalid variable name
                        output = main.execute("var1 = 1").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The name of variable should contain only Latin letters.");
                        }

                        // testing invalid value
                        output = main.execute("var = 2a").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The value can be an integer number or a value of another variable");
                        }

                        // testing multiple equalization
                        output = main.execute("c = 7 - 1 = 5").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The program could not handle a invalid assignment.");
                        }

                        // testing assignment by unassigned variable
                        output = main.execute("variable = f").trim().toLowerCase();
                        if (!(output.startsWith("unknown") || output.startsWith("invalid"))) {
                            return CheckResult.wrong("The program should not allow an assignment by unassigned variable.");
                        }

                        // checking case sensitivity
                        main.execute("variable = 777");
                        output = main.execute("Variable").trim().toLowerCase();
                        if (!output.startsWith("unknown")) {
                            return CheckResult.wrong("The program should be case sensitive.");
                        }

                        // checking case sensitivity
                        main.execute("variable = 777");
                        output = main.execute("Variable").trim().toLowerCase();
                        if (!output.startsWith("unknown")) {
                            return CheckResult.wrong("The program should be case sensitive.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // A test suit for multiplication and division
                        main.start();

                        String output = main.execute("4 * 3").trim();
                        if (!output.equals("12")) {
                            return CheckResult.wrong("The program has problems with multiplication operation.");
                        }

                        output = main.execute("91 / 13").trim();
                        if (!output.equals("7")) {
                            return CheckResult.wrong("The program has problems with division operation.");
                        }

                        // testing all operators
                        main.execute(" a= 7 \n b =2");
                        output = main.execute("a * 4 / b - (3 - 1)").trim();
                        if (!output.equals("12")) {
                            return CheckResult.wrong("The program cannot correctly process several operations.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // testing priority of parentheses
                        main.start();

                        // expression from the example
                        String output = main.execute("7 + 3 * ((4 + 3) * 7 + 1) - 6 / (2 + 1)").trim();
                        if (!output.equals("155")) {
                            return CheckResult.wrong("The program cannot reproduce an example from the task.");
                        }

    //                    // test case with a big amount of brackets
    //                    output = main.execute("3 + (9 + ( 68 * 3/9)) * ((7-2 * 5) / 2) * 6").trim();
    //                    if (!output.equals("-282")) {
    //                        return CheckResult.wrong("Program incorrectly solves expressions with multi-level parentheses");
    //                    }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // a set of negative tests
                        main.start();

                        // tests with unclosed brackets
                        String output = main.execute("8 * (2 + 3").trim().toLowerCase();
                        String output1 = main.execute("4 + 5)").trim().toLowerCase();
                        if (!output.startsWith("invalid") || !output1.startsWith("invalid")) {
                            return CheckResult.wrong("The program could not handle an invalid expression.");
                        }

                        // sequence of * test
                        output = main.execute("2 ************ 2").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("A sequence of \"*\" should return \"Invalid expression\".");
                        }

                        // sequence of / test
                        output = main.execute("2 // 2").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("A sequence of \"/\" should return \"Invalid expression\".");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // test suit for the 8th stage with very large numbers
                        main.start();

                        // testing basic assignment
                        String output = main.execute("n = 32000000000000000000");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // testing a big amount of numbers
                        output = main.execute("33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                                "49000000000000000000 - 32000000000000000000 - 9000000000000000000 " +
                                "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                        if (!output.equals("-2999999999999999999")) {
                            return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.");
                        }

                        // the same with a variable
                        output = main.execute(
                            "33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                                "49000000000000000000 - n - 9000000000000000000 " +
                                "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                        if (!output.equals("-2999999999999999999")) {
                            return CheckResult.wrong(
                                "The program cannot process addition " +
                                    "and subtraction operations correctly.");
                        }

                        // testing reassignment with big values
                        output = main.execute("c = n \nc = 2000000000000000000000");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // check value
                        output = main.execute("  c   ").trim();
                        if (!output.equals("2000000000000000000000")) {
                            return CheckResult.wrong("The variable stores not a correct value." +
                                    "May be the program could not assign the value of one variable to another one.");
                        }

                        // the sum of the numbers is zero
                        output = main.execute("11000000000000000000 - 9000000000000000000 - " +
                                "c + 1998000000000000000000").trim();
                        if (!output.equals("0")) {
                            return CheckResult.wrong("The problem when sum is equal to 0 has occurred.");
                        }

                        // test of multiple operations
                        output = main.execute("5000000000000000000 --- 2000000000000000000 " +
                                "++++++ 4000000000000000000 -- 2000000000000000000 ---- 1000000000000000000").trim();
                        if (!output.equals("10000000000000000000")) {
                            return CheckResult.wrong("The program cannot process multiple operations with several operators.");
                        }

                        // testing all operators, with variables
                        main.execute(" a= 7000000000000000000 \n b =2000000000000000000");
                        output = main.execute("a * 4000000000000000000 / " +
                                "b - (3000000000000000000 - 1000000000000000000)").trim();
                        if (!output.equals("12000000000000000000")) {
                            return CheckResult.wrong("The program cannot correctly process several operations.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    })

            );
        }
    }
  learner_created: false
- name: src/calculator/Assigner.java
  visible: true
  text: |
    package calculator;

    import java.util.Map;

    import static calculator.ExpressionChecker.checkExpression;
    import static calculator.IdentifierChecker.*;

    public class Assigner {
        private Assigner() {
        }

        static void assignVariable(Map<String, Integer> varMap, String input) {
            String right = input.substring(0, input.indexOf("=")).trim();
            String left = input.substring(input.indexOf("=") + 1).trim();
            if (!right.contains("(") && !right.contains(")") && checkIdentifier(right)
                    && !left.contains("=") && checkExpression(left) && checkIdentifiers(left) && isKnownIdentifiers(varMap, left)) {
                Integer leftResult = PostfixCalculator.calc(varMap, left);
                if (leftResult != null) {
                    varMap.put(right, leftResult);
                }
            } else if (right.contains("(") || right.contains(")") || !checkIdentifier(right)) {
                System.out.println("Invalid identifier");
            } else if (left.contains("=") || !checkIdentifiers(left)) {
                System.out.println("Invalid assignment");
            } else if (!checkExpression(left)) {
                System.out.println("Invalid expression");
            } else if (!isKnownIdentifiers(varMap, left)) {
                System.out.println("Unknown variable");
            }
        }
    }
  learner_created: true
- name: src/calculator/Evaluator.java
  visible: true
  text: |
    package calculator;

    import java.util.Map;

    import static calculator.ExpressionChecker.checkExpression;
    import static calculator.IdentifierChecker.checkIdentifiers;
    import static calculator.IdentifierChecker.isKnownIdentifiers;

    public class Evaluator {
        private Evaluator() {
        }

        static void evaluate(Map<String, Integer> varMap, String input) {
            if (checkExpression(input) && checkIdentifiers(input) && isKnownIdentifiers(varMap, input)) {
                Integer result = PostfixCalculator.calc(varMap, input);
                if (result != null) {
                    System.out.println(result);
                } else {
                    System.out.println("evaluation error");
                }
            } else if (!checkIdentifiers(input)) {
                System.out.println("Invalid identifier");
            } else if (!checkExpression(input)) {
                System.out.println("Invalid expression");
            } else if (!isKnownIdentifiers(varMap, input)) {
                System.out.println("Unknown variable");
            }
        }
    }
  learner_created: true
- name: src/calculator/ExpressionChecker.java
  visible: true
  text: |-
    package calculator;

    import java.util.Arrays;

    public class ExpressionChecker {

        private ExpressionChecker() {
        }

        static boolean checkExpression(String expression) {
            if (expression.contains("(") && expression.contains(")")) {
                if (!checkParenthesesNumber(expression)) {
                    return false;
                }
                return expression.indexOf(")") >= expression.indexOf("(");
            } else if (expression.contains("(")) {
                return false;
            } else if (expression.contains(")")) {
                return false;
            } else {
                String operation = "+";
                boolean isOperationsSequence = false;
                for (var element : expression.split(" ")) {
                    if (element.matches("[a-zA-Z]+") || element.matches("\\d+")) {
                        isOperationsSequence = false;
                    } else if (element.matches("[)+-/*(^]")) {
                        if (isOperationsSequence) {
                            switch (operation) {
                                case "+":
                                case "-":
                                    if (!element.matches("[+-]")) {
                                        return false;
                                    }
                                    break;
                                case "(":
                                case ")":
                                    if (!element.matches("[(-)]")) {
                                        return false;
                                    }
                                    break;
                                default:
                                    return false;
                            }
                        } else {
                            operation = element;
                            isOperationsSequence = true;
                        }
                    }
                }
            }
            return true;
        }

        private static boolean checkParenthesesNumber(String expression) {
            var openParenthesis = Arrays.stream(expression.split(" ")).filter(e -> e.equals("(")).count();
            var closeParenthesis = Arrays.stream(expression.split(" ")).filter(e -> e.equals(")")).count();
            return openParenthesis == closeParenthesis;
        }
    }
  learner_created: true
- name: src/calculator/IdentifierChecker.java
  visible: true
  text: |
    package calculator;


    import java.util.Map;

    public class IdentifierChecker {
        private IdentifierChecker() {
        }

        static boolean checkIdentifiers(String identifiers) {
            for (var identifier : identifiers.split(" ")) {
                if (identifier.matches(".*[a-zA-Z].*") && !checkIdentifier(identifier)) {
                    return false;
                }
            }
            return true;
        }

        static boolean checkIdentifier(String identifier) {
            return identifier.matches("[a-zA-Z]+");
        }

        static boolean isKnownIdentifiers(Map<String, Integer> varMap, String input) {
            for (var identifier : input.split(" ")) {
                if (identifier.matches("[a-zA-Z]+") && !varMap.containsKey(identifier)) {
                    return false;
                }
            }
            return true;
        }
    }
  learner_created: true
- name: src/calculator/Reader.java
  visible: true
  text: |
    package calculator;

    import java.util.Scanner;

    public class Reader {
        private Reader() {
        }

        private static final Scanner scanner = new Scanner(System.in);

        static String read() {
            return scanner.nextLine().trim()
                    .replaceAll("[+]", " + ")
                    .replaceAll("[-]", " - ")
                    .replaceAll("[*]", " * ")
                    .replaceAll("[/]", " / ")
                    .replaceAll("[\\^]", " ^ ")
                    .replaceAll("[(]", " ( ")
                    .replaceAll("[)]", " ) ")
                    .replaceAll("[=]", " = ")
                    .replaceAll("\\s+", " ");
        }
    }
  learner_created: true
- name: src/calculator/App.java
  visible: true
  text: |
    package calculator;

    import java.util.HashMap;

    import static calculator.Assigner.assignVariable;
    import static calculator.Evaluator.evaluate;
    import static calculator.Reader.read;

    public class App {
        private App() {
        }

        private static final HashMap<String, Integer> varMap = new HashMap<>();

        static void start() {
            while (true) {
                processInput();
            }
        }

        static void processInput() {
            String input = read();
            if (input.matches("\\s*/\\s*\\w+")) {
                runCommand(input);
            } else if ((input.contains("="))) {
                assignVariable(varMap, input);
            } else if (!input.equals("")) {
                evaluate(varMap, input);
            }
        }

        private static void runCommand(String command) {
            command = command.replaceAll(" ", "");
            switch (command) {
                case "/exit":
                    System.out.println("Bye!");
                    System.exit(0);
                    break;
                case "/help":
                    System.out.println("The program calculates the sum of numbers");
                    break;
                default:
                    System.out.println("Unknown command");
            }
        }
    }
  learner_created: true
- name: src/calculator/PostfixCalculator.java
  visible: true
  text: |-
    package calculator;


    import java.util.*;

    public class PostfixCalculator {
        private static String operation = "+";
        private static boolean isOperationsSequence = false;
        private static String lastOperation = "~";

        private PostfixCalculator() {
        }

        static Integer calc(Map<String, Integer> varMap, String input) {
            Deque<String> reorderingStack = new ArrayDeque<>();
            Deque<String> postfixStack = new ArrayDeque<>();

            for (var element : input.split(" ")) {
                transElement(varMap, reorderingStack, postfixStack, element);
            }
            if (isOperationsSequence) {
                pushOperation(reorderingStack, postfixStack, operation);
            }
            pushOperation(reorderingStack, postfixStack);
            return postfixAnswer(postfixStack);
        }

        private static void transElement(Map<String, Integer> varMap, Deque<String> reorderingStack, Deque<String> postfixStack, String element) {
            if (element.matches("[a-zA-Z]+") && varMap.containsKey(element)) {
                if (varMap.get(element) != null) {
                    int num = varMap.get(element);
                    transValue(reorderingStack, postfixStack, num);
                }
            } else if (element.matches("\\d+")) {
                int num = Integer.parseInt(element);
                transValue(reorderingStack, postfixStack, num);
            } else if (element.matches("[)+-/*(^]")) {
                if (isOperationsSequence) {
                    switch (element) {
                        case "-":
                            if (operation.matches("-")) {
                                operation = "+";
                            } else {
                                operation = element;
                            }
                            break;
                        case "(":
                            pushOperation(reorderingStack, postfixStack, operation);
                            operation = element;
                            lastOperation = "(";
                            break;
                        case ")":
                            if (!lastOperation.equals("(")) {
                                operation = element;
                                pushOperation(reorderingStack, postfixStack, operation);
                            }
                            break;
                        default:
                            operation = element;
                    }
                } else {
                    if (element.equals(")")) {
                        operation = element;
                        pushOperation(reorderingStack, postfixStack, operation);
                    } else {
                        operation = element;
                    }
                    isOperationsSequence = true;
                }
            }
        }


        private static void transValue(Deque<String> reorderingStack, Deque<String> postfixStack, int num) {
            if (isOperationsSequence && ((lastOperation.equals("(")) || postfixStack.isEmpty()) && operation.equals("-")) {
                postfixStack.offerLast(String.valueOf(-num));
                lastOperation = "~";
            } else if (isOperationsSequence) {
                pushOperation(reorderingStack, postfixStack, operation);
                postfixStack.offerLast(String.valueOf(num));
                lastOperation = "~";
            } else {
                postfixStack.offerLast(String.valueOf(num));
            }
            isOperationsSequence = false;
        }

        private static void pushOperation(Deque<String> reorderingStack, Deque<String> postfixStack, String operation) {
            List<String> powerPriorities = List.of("^");
            List<String> multiPriorities = List.of("*", "/", "^");
            List<String> additivePriorities = List.of("+", "-", "*", "/", "^");

            if (reorderingStack.isEmpty() || reorderingStack.peekLast().equals("(")) {
                reorderingStack.offerLast(operation);
                return;
            }
            switch (operation) {
                case "-":
                case "+": //!reorderingStack.isEmpty() ||
                    while (!reorderingStack.isEmpty() && !reorderingStack.peekLast().equals("(") && additivePriorities.contains(reorderingStack.peekLast())) {
                        postfixStack.offerLast(reorderingStack.pollLast());
                    }
                    reorderingStack.offerLast(operation);
                    break;
                case "/":
                case "*":
                    while (!reorderingStack.isEmpty() && !reorderingStack.peekLast().equals("(") && multiPriorities.contains(reorderingStack.peekLast())) {
                        postfixStack.offerLast(reorderingStack.pollLast());
                    }
                    reorderingStack.offerLast(operation);
                    break;
                case "^":
                    while (!reorderingStack.isEmpty() && !reorderingStack.peekLast().equals("(") && powerPriorities.contains(reorderingStack.peekLast())) {
                        postfixStack.offerLast(reorderingStack.pollLast());
                    }
                    reorderingStack.offerLast(operation);
                    break;
                case "(":
                    reorderingStack.offerLast(operation);
                    break;
                case ")":
                    while (!reorderingStack.isEmpty()) {
                        if (Objects.equals(reorderingStack.peekLast(), "(")) {
                            reorderingStack.pollLast();
                            break;
                        } else {
                            postfixStack.offerLast(reorderingStack.pollLast());
                        }
                    }
                    break;
                default:
                    break;
            }
        }

        private static void pushOperation(Deque<String> reorderingStack, Deque<String> postfixStack) {
            while (!reorderingStack.isEmpty()) {
                if (reorderingStack.peekLast().equals(")") || reorderingStack.peekLast().equals("(")) {
                    reorderingStack.pollLast();
                }
                postfixStack.offerLast(reorderingStack.pollLast());
            }
        }

        private static Integer postfixAnswer(Deque<String> postfixStack) {
            Deque<String> answerStack = new ArrayDeque<>();
            while (!postfixStack.isEmpty()) {
                if (postfixStack.peek().matches("-*\\d+")) {
                    answerStack.offerLast(postfixStack.pollFirst());
                } else if (postfixStack.peek().matches("[+-/*^]")) {
                    int sndNum = Integer.parseInt(Objects.requireNonNull(answerStack.pollLast()));
                    int fstNum = Integer.parseInt(Objects.requireNonNull(answerStack.pollLast()));
                    int result = Calculator.calc(fstNum, sndNum, Objects.requireNonNull(postfixStack.pollFirst()));
                    answerStack.offerLast(String.valueOf(result));
                }
            }
            if (answerStack.size() == 1) {
                try {
                    return Integer.parseInt(answerStack.poll());
                } catch (NumberFormatException e) {
                    return null;
                }
            }
            return null;
        }
    }
  learner_created: true
- name: src/calculator/Calculator.java
  visible: true
  text: |
    package calculator;

    public class Calculator {
        private Calculator() {
        }

        static int calc(int fstNum, int sndNum, String operation) {
            switch (operation) {
                case "+":
                    return fstNum + sndNum;
                case "-":
                    return fstNum - sndNum;
                case "*":
                    return fstNum * sndNum;
                case "/":
                    return fstNum / sndNum;
                case "^":
                    return (int) Math.pow(fstNum, sndNum);
                default:
                    throw new IllegalArgumentException();
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5323#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sat, 02 Apr 2022 21:37:14 UTC
record: -1
